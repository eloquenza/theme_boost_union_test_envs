[tool]
[tool.poetry]
name = "theme_boost_union_test_envs"
version = "0.1.0"
homepage = "https://github.com/eloquenza/theme_boost_union_test_envs"
description = "Test environments for the Moodle theme 'Boost Union'."
authors = ["Dennis Grabowski <dennis.grabowski@hs-hannover.de>"]
readme = "README.md"
license =  "GPL-3.0-only"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
]
packages = [
    { include = "theme_boost_union_test_envs" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
docker = "^6.1.3"
fire = "0.4.0"
gitpython = "^3.1.37"
loguru = "^0.7.2"
dependency-injector = "^4.41.0"
pyyaml = "^6.0.1"
rich = "^13.5.3"
requests = "^2.31.0"

[tool.poetry.scripts]
theme_boost_union_test_envs = 'theme_boost_union_test_envs.cli:main'

[tool.poetry.group.dev.dependencies]
black  = { version = "^22.3.0", optional = true}
isort  = { version = "5.10.1", optional = true}
flake8  = { version = "4.0.1", optional = true}
flake8-docstrings = { version = "^1.6.0", optional = true }
livereload = {version = "^2.6.3", optional = true}
pre-commit = {version = "^2.17.0", optional = true}
toml = {version = "^0.10.2", optional = true}
tox  = { version = "^3.24.5", optional = true}
types-requests = "^2.31.0.6"
twine  = { version = "^3.8.0", optional = true}
mypy = "^1.5.1"

[tool.poetry.group.doc.dependencies]
mkdocs  = { version = "^1.2.3", optional = true}
mkdocs-include-markdown-plugin  = { version = "^3.2.3", optional = true}
mkdocs-material  = { version = "^8.1.11", optional = true}
mkdocstrings  = { version = "^0.18.0", optional = true}
mkdocs-material-extensions  = { version = "^1.0.3", optional = true}
mkdocs-autorefs = {version = "^0.3.1", optional = true}
mike = { version="^1.1.2", optional=true}
setuptools = {version="^68.0", optional = true}
pkginfo = {version="^1.9", optional = true}
virtualenv = {version="^20.0", optional = true}

[tool.poetry.group.test.dependencies]
pytest  = { version = "^7.0.1", optional = true}
pytest-cov  = { version = "^3.0.0", optional = true}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | \.history
)/
'''
[tool.isort]
profile = "black"

[tool.pyright]
exclude = [
    ".git",
    ".eggs",
    ".github",
    ".history",
    ".idea",
    ".tox",
    ".vscode",
    "docs",
    "**/__pycache__",
    "eloquenza_theme_boost_union_test_envs.egg-info"
]
ignore = []
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.11"

[tool.mypy]
# Ensure we know what we do
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true

# Imports management
ignore_missing_imports = false

# Ensure full coverage
disallow_untyped_defs = true
#disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
# Restrict dynamic typing (a little)
# e.g. `x: List[Any]` or x: List`
disallow_any_generics = true

# Show errors codes
show_error_codes = true

# From functions not declared to return Any
warn_return_any = true

[[tool.mypy.overrides]]
module = ["fire"]
ignore_missing_imports = true

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    # Don't complain about missing debug-only code:
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "def main",
]
